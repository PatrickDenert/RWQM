#include <DFRobot_SIM7000.h>
#include <Base64.h>
#include <OneWire.h>
#include "OneWire.h"
//#include "DallasTemperature.h"
//#include <SD.h>
#include <SPI.h>
#include <SD.h>
//OneWire ds(2);
//DallasTemperature tempSensor(&ds);

#define PIN_TX     11
#define PIN_RX     10
SoftwareSerial     mySerial(PIN_RX,PIN_TX);
DFRobot_SIM7000    sim7000(&mySerial);
//unsigned long long time = 1668670372826;

//unsigned char jsonString[] = "{\"time\":\"1668670372826\",\"temp\":77.75,\"tb\":1962.658,\"tds\":34.03,\"cdt\":68.06}";
//unsigned char base64String[1];
volatile double flow;
unsigned long long time = 1668670372826;  
float temp = 20;
float tb = 30;
float tds = 40;
bool connection;                //determine if mcu cellular is working (ie toggle sd module)

void setup() {
  pinMode(18,OUTPUT);           //LED for testing

  Serial.begin(9600);           //serial to pc
  mySerial.begin(19200);        //serial to cellular

  Serial.println(F("Turn ON SIM7000......"));
  if(sim7000.turnON()){                             //Turn ON SIM7000
    //Serial.println(F("Successfully turned on"));
    connection = true;
  } else {
    //Serial.println(F("Failed to turn on!"));
    connection = false;
  }
  delay(1000);

  Serial.println(F("Set baud rate......"));       

  if(connection == true){                           //check if cellular is working
    while(1){
      if(sim7000.setBaudRate(19200)){               //Set SIM7000 baud rate from 115200 to 19200 reduce the baud rate to avoid distortion
        Serial.println(F("Set baud rate:19200"));
        connection = true;
          break;
        }else{
          Serial.println(F("Faile to set baud rate"));
          connection = false;
          delay(1000);
        }
     
    }

    delay(1000);
  
    mySerial.begin(19200);

  
    if(sim7000.attacthService()){                       //connect to hologram network
      Serial.println(F("Attatched to Service"));
      connection = true;
    } else {
      Serial.println(F("Fail to Attatch to service"));
      connection = false;
    }
    delay(1000);
  }
  else{                                                //if no cellular turn on sd module
    SD.begin(0);  
  }
}

void loop() {
  int a;
  a = availableMemory();        
  Serial.println(a);                      //check mem at start of loop
  
  //sensorCollect();
  flow = 0;  
  float temp = temp + random(10);
  float tb = tb + random(20);
  float tds = tds + random(30);
  time = time + 900000;
  float cdt = tds*2.0;
  temp = temp*1.8 + 32;

  //char payloadBuffer[150];
  char * payloadBuffer;
  payloadBuffer = (char*) malloc(300);
  
  JSONdotStringify(time,temp,flow,cdt,tb,tds,payloadBuffer);  //gen json string from sensor data

  if(connection == false){                                    //if no cellular then save to SD card
    SDCardWrite(payloadBuffer);

    SDCardRead();

    delay(10000);  
  }

  else{
    
  
  //Serial.println(payloadBuffer);

  int inputStringLength = strlen(payloadBuffer);
  int encodedLength = Base64.encodedLength(inputStringLength);

  //char base64String[encodedLength+1];
  char * base64String;
  base64String = (char*) malloc(encodedLength+1);
  
  char message[encodedLength+35];
  //char * message;
  //message = (char*) malloc(encodedLength+35);
  
  Base64.encode(base64String, payloadBuffer, inputStringLength);        //encode json string

  free(payloadBuffer);

  sprintf(message, "{\"k\":\"5#p7ILQi\",\"d\":\"%s\",\"t\":\"test\"}", base64String);   //create message to send to hologram
  delay(1000);
  
  free(base64String);
  
  delay(10000);
  sendmsg(message);                               //send message to cellular 
  delay(1000);
  Serial.flush();

  
  
  
  //Serial.println("test");
  a = availableMemory();
  Serial.println(a);                            //check mem left after main code

  
  delay(20000);
  free(message);

  byte error_code = alert(tds,temp,tb,cdt);     //generate error code
  Serial.println(error_code);                   
  error_code = 1;
  if(error_code !=0 ){                          //send errorcode if not 0
    char * alertmessage;
    alertmessage = (char*) malloc(100);
    sprintf(alertmessage, "{\"k\":\"5#p7ILQi\",\"d\":\"%i\",\"t\":\"alert\"}", error_code);
    //Serial.println(alertmessage);
    delay(1000);
    sendmsg(alertmessage);
    delay(1000);
    
    free(alertmessage);
  }
 
  }
} 

bool sendmsg(char *message){
  if(sim7000.openNetwork(sim7000.eTCP, "cloudsocket.hologram.io", 9999)){
    Serial.println(F("Connect OK"));
  } else {
    Serial.println(F("Fail to connect"));
    return false;
  }
  delay(1000);
  if(sim7000.send(message)){
    Serial.println(F("Sent OK"));
    delay(1000);
  } else {
    Serial.println(F("Fail to send"));
    return false;
   
  }
 return true;
}

char *ulltoa(uint64_t value, char *buf, int radix) {
    char tmp[64 + 1];
    char *p1 = tmp, *p2;
    static const char xlat[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    if(radix < 2 || radix > 36)    return nullptr;
    do {*p1++ = xlat[value % (unsigned)radix];} while((value /= (unsigned)radix));
    for(p2 = buf; p1 != tmp; *p2++ = *--p1) ;
    *p2 = '\0';
    return buf;
}
bool JSONdotStringify(unsigned long long time, float temp, float flow, float cdt, float tb, float tds, char *payloadBuffer){
    char timeString[16];
    ulltoa(time, timeString, 10);

    char tempString[6];
    dtostrf(temp, 5, 2, tempString);

    char flowString[6];
    dtostrf(flow, 5, 2, flowString);

    char cdtString[6];
    dtostrf(cdt, 5, 2, cdtString);

    char tbString[8];
    dtostrf(tb, 7, 2, tbString);

    char tdsString[6];
    dtostrf(tds, 5, 2, tdsString);

    sprintf(payloadBuffer, "{\"time\":%s,\"temp\":%s,\"flow\":%s,\"cdt\":%s,\"tb\":%s,\"tds\":%s}", timeString, tempString, flowString, cdtString, tbString, tdsString);

    return true;    
}

bool sensorCollect(){
  flow = 0;  
  float temp = temp + random(10);
  float tb = tb + random(20);
  float tds = tds + random(30);
  time = time + 900000;
  float cdt = tds*2.0;
  temp = temp*1.8 + 32;

  char payloadBuffer[150];

  JSONdotStringify(time,temp,flow,cdt,tb,tds,payloadBuffer);  

  //Serial.println(payloadBuffer);

  int inputStringLength = strlen(payloadBuffer);
  int encodedLength = Base64.encodedLength(inputStringLength);

  char base64String[encodedLength+1];

  char message[encodedLength+35];

  Base64.encode(base64String, payloadBuffer, inputStringLength);

  sprintf(message, "{\"k\":\"5#p7ILQi\",\"d\":\"%s\",\"t\":\"test\"}", base64String);
  delay(1000);
  
  sendmsg(message);

  delay(10000);
  

}
int availableMemory()
{
int size = 2048;
byte *buf;
while ((buf = (byte *) malloc(--size)) == NULL);
free(buf);
return size;
}
byte alert(float tds, float temp, float tb, float cdt){     //error code generator
  byte error_code = B0000;
  if((tds * 1.1) > 500){
    //Serial.println("Warning: tds levels past maximum limit!");
    error_code = error_code | B1000;
    
  }

  if((temp * 1.005) > 104 | (temp * 1.005) < 32){
    //Serial.println("Warning: temperature outside safe limit!");
    error_code = error_code | B0100;

  }

  if((tb * 1.073) > 1){
    //Serial.println("Warning: turbidity past maximum limit!");
    error_code = error_code | B0010;
    
  }

  if((cdt * 1.073) > 1000){
    //Serial.println("Warning: conductivity past maximum limit!");
    error_code = error_code | B0001;
    
  }
  
  return error_code;


  }

  void SDCardWrite(char *payload) {
    //SD.begin(0);
    File file = SD.open("temp1.txt", FILE_WRITE);

  // if the file opened okay, write to it:
  if (file) {
    Serial.print("Writing to temp.txt...");
    file.println(payload);
    // close the file:
    file.close();
    Serial.println("done.");
  } else {
    // if the file didn't open, print an error:
    Serial.println("error opening data.txt");
  }
 
}

void SDCardRead() {
 //SD.begin(0);
  File file = SD.open("temp1.txt");
  if (file) {
    //Serial.println("test.txt:");

    // read from the file until there's nothing else in it:
    while (file.available()) {
      Serial.write(file.read());
    }
    // close the file:
    file.close();
    Serial.println(F("--- end of file ---"));
  } else {
    // if the file didn't open, print an error:
    //Serial.println("error opening test.txt");
  }
}

  
